[core]
	editor = nvim
	excludesfile = /home/zfadli/.gitignore_global

[user]
  name = Zakaria Fadli
  email = zakaria1193@gmail.com

[includeIf "gitdir:/home/zfadli/work/"]
  path = ~/.gitconfig_work

[pull]
  rebase = true

[push]
  default = upstream

[status]
	submoduleSummary = 1

[alias]
  yolo = '!git commit -m \"$(curl -s whatthecommit.com/index.txt)\"'
  cof = '!git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git checkout'
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  # Create and push a tag to origin (use -f for force)
  # Usage: git release [-f] <tag-name>
  # Example: git release v1.0.0
  #          git release -f v1.0.0
  release = "!f() { \
    if [ \"$1\" = \"-f\" ]; then \
        git tag -f \"$2\" && git push -f origin \"$2\"; \
    else \
        git tag \"$1\" && git push origin \"$1\"; \
    fi; \
    }; f"

# Settings for rebase
[sequence]
	editor = rebase-editor -s -c -m '> ' --no-alternate-screen
[rebase]
	autosquash = true

# Settting for difftool

[diff]
  tool = difft
[difftool]
  prompt = false
[difftool "difft"]
  cmd = difft "$LOCAL" "$REMOTE"
[difftool "meld"]
  cmd = meld "$LOCAL" "$REMOTE"

# Settings for mergetool ( = meld )
[merge]
  tool = meld
[mergetool "meld"]
  # Choose one of these 2 lines (not both!) explained below.
  # cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
  cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
[mergetool]
  prompt = false
	keepBackup = false

# Settings for delta (better git diff, git show etc..)
[core]
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true    # use n and N to move between diff sections
  light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
  line-numbers = true

[merge]
  conflictstyle = diff3

[diff]
  colorMoved = default
  # Recent versions of Git (â‰¥ v2.17, April 2018) are able to detect moved blocks of code and style them
  # differently from the usual removed/added lines. If you have activated this feature in Git, then Delta
  # will automatically detect such differently-styled lines, and display them unchanged, i.e. with the raw
  # colors it receives from Git.
[credential "https://github.com"]
	helper =
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !/usr/bin/gh auth git-credential

[gpg]
  format = ssh

[gpg "ssh"]
  program = "/opt/1Password/op-ssh-sign"

[tag]
	sort = version:refname
[versionsort]
	suffix = -rc
[fetch]
	prune = true
[log]
	follow = true
